<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dabshi.github.io</id>
    <title>dabshi</title>
    <updated>2020-02-17T02:27:15.405Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dabshi.github.io"/>
    <link rel="self" href="https://dabshi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dabshi.github.io/images/avatar.png</logo>
    <icon>https://dabshi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, dabshi</rights>
    <entry>
        <title type="html"><![CDATA[hashMap源码]]></title>
        <id>https://dabshi.github.io/post/hashmap</id>
        <link href="https://dabshi.github.io/post/hashmap">
        </link>
        <updated>2020-02-16T08:57:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="版本jdk18">版本:jdk1.8</h2>
<h3 id="相关初始值">相关初始值</h3>
<pre><code class="language-java"> /**
 * The default initial capacity - MUST be a power of two.
 */
 //默认初始容量(必须为2的幂次方)
static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16

/**
 * The maximum capacity, used if a higher value is implicitly specified
 * by either of the constructors with arguments.
 * MUST be a power of two &lt;= 1&lt;&lt;30.
 */
 //最大容量
static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;

/**
 * The load factor used when none specified in constructor.
 */
 //默认加载因子(长度超过容量 * 加载因子 则进行扩容)
static final float DEFAULT_LOAD_FACTOR = 0.75f;

/**
 * The bin count threshold for using a tree rather than list for a
 * bin.  Bins are converted to trees when adding an element to a
 * bin with at least this many nodes. The value must be greater
 * than 2 and should be at least 8 to mesh with assumptions in
 * tree removal about conversion back to plain bins upon
 * shrinkage.
 */
 //链表长度超过TREEIFY_THRESHOLD 则结构有链表转为红黑树
static final int TREEIFY_THRESHOLD = 8;

/**
 * The bin count threshold for untreeifying a (split) bin during a
 * resize operation. Should be less than TREEIFY_THRESHOLD, and at
 * most 6 to mesh with shrinkage detection under removal.
 */
 //当节点元素低于6则由红黑树转为链表
static final int UNTREEIFY_THRESHOLD = 6;

/**
 * The smallest table capacity for which bins may be treeified.
 * (Otherwise the table is resized if too many nodes in a bin.)
 * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts
 * between resizing and treeification thresholds.
 */
 //红黑树结构时,hashmap的最少容量
static final int MIN_TREEIFY_CAPACITY = 64;
</code></pre>
<hr>
<h3 id="putk-key-v-value">put(K key, V value)</h3>
<p><em>put前会先判断是否已存在key相等的值,相等覆盖并返回.不存在则在适当位置添加并返回null.期间可能会存在结构转换和扩容</em></p>
<pre><code class="language-java"> public V put(K key, V value) {
        return putVal(hash(key), key, value, false, true);
    }

    /**
     * Implements Map.put and related methods
     *
     * @param hash hash for key
     * @param key the key
     * @param value the value to put
     * @param onlyIfAbsent if true, don't change existing value
     * @param evict if false, the table is in creation mode.
     * @return previous value, or null if none
     */
    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
        //判断table是否为空,为空则调用resize()方法初始化.
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        //通过 (n - 1) &amp; hash 计算出key在table中所在位置索引,在通过索引获取到该位置的节点,若为空则通过newNode()新建节点.
        if ((p = tab[i = (n - 1) &amp; hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        //若给位置存在节点(p)再做下一步判断.
        else {
            Node&lt;K,V&gt; e; K k;
            //判断key是否已存在 
            if (p.hash == hash &amp;&amp;
                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
                e = p;
            //判断p节点是否为treeNode类型,是则以操作红黑树的方式进行
            else if (p instanceof TreeNode)
                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
            //不满足上面两个条件则说明p为普通链表结构,遍历链表查找key是否已存在,不存在则新建
            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        //如果链表长度大于超过 链表转红黑树阀值 TREEIFY_THRESHOLD 则进行结构改变,由链表 -&gt; 红黑树
                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                        break;
                    p = e;
                }
            }
            //这里的e如果有值,就说明为此次put的key有对应的值,且e为此旧值
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        //判断长度是否超过阀值（默认：75%），超过则进行扩容（默认：两倍）
        if (++size &gt; threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    }
</code></pre>
<h4 id="puttreevalhashmapkv-map-nodekv-tab-int-h-k-k-v-v"><em>putTreeVal(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, int h, K k, V v)</em></h4>
<p><em>从源码中可以看出在红黑树结构中put时,它会先从树中找是否有与k且k.hash相等的值(key已存在),有则覆盖并返回旧值.不存在则从root根据小左大右的要求顺序向下找一个null节点将值保存</em></p>
<pre><code class="language-java">/**
 * Tree version of putVal.
 */
final TreeNode&lt;K,V&gt; putTreeVal(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,
                               int h, K k, V v) {
    Class&lt;?&gt; kc = null;
    boolean searched = false;
    TreeNode&lt;K,V&gt; root = (parent != null) ? root() : this;
  
    for (TreeNode&lt;K,V&gt; p = root;;) {
        //-- 判断key是否已存在,存在则返回旧值,不存在则得出dir(-1 | 1)
        int dir, ph; K pk;
        if ((ph = p.hash) &gt; h)
            dir = -1;
        else if (ph &lt; h)
            dir = 1;
        else if ((pk = p.key) == k || (k != null &amp;&amp; k.equals(pk)))
            return p;
        //走到这里说明ph=h但k和pk不相同,再判断:k未实现comparable || 实现了k为实现comparable且结果相同
        else if ((kc == null &amp;&amp;
                  (kc = comparableClassFor(k)) == null) ||
                 (dir = compareComparables(kc, k, pk)) == 0) {
            //这里会查找整个红黑树,并且整个put过程只会执行一次这样的查找操作.
            if (!searched) {
                TreeNode&lt;K,V&gt; q, ch;
                searched = true;
                if (((ch = p.left) != null &amp;&amp;
                     (q = ch.find(h, k, kc)) != null) ||
                    ((ch = p.right) != null &amp;&amp;
                     (q = ch.find(h, k, kc)) != null))
                    return q;
            }
            //利用tieBreakOrder方法比较两个值得出一个dir(-1 | 1)
            dir = tieBreakOrder(k, pk);
        }
        //-- 根据dir向左或者向右找null节点put
        TreeNode&lt;K,V&gt; xp = p;
        if ((p = (dir &lt;= 0) ? p.left : p.right) == null) {
            Node&lt;K,V&gt; xpn = xp.next;
            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);
            if (dir &lt;= 0)
                xp.left = x;
            else
                xp.right = x;
            xp.next = x;
            x.parent = x.prev = xp;
            if (xpn != null)
                ((TreeNode&lt;K,V&gt;)xpn).prev = x;
            moveRootToFront(tab, balanceInsertion(root, x));
            return null;
        }
    }
}
</code></pre>
<h5 id="tiebreakorderobject-a-object-b"><em>tieBreakOrder(Object a, Object b)</em></h5>
<p><em>选择向右put还是向左put</em></p>
<pre><code class="language-java">static int tieBreakOrder(Object a, Object b) {
    int d;
    if (a == null || b == null ||
        (d = a.getClass().getName().
         compareTo(b.getClass().getName())) == 0)
        //注:identityHashCode()方法返回以超类Object计算hashcode的方法计算出的值,与hashCode()方法的区别是,一个类如果重写了hashcode方法则identityHashCode() 和 hashCode()返回的值则不一样.反之 一样.
        d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?
             -1 : 1);
    return d;
}
</code></pre>
<h4 id="treeifybinnodekv-tab-int-hash"><em>treeifyBin(Node&lt;K,V&gt;[] tab, int hash)</em></h4>
<p><em>链表结构转为红黑树结构</em></p>
<pre><code class="language-java">final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) {
    int n, index; Node&lt;K,V&gt; e;
    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)
        resize();
    else if ((e = tab[index = (n - 1) &amp; hash]) != null) {
        TreeNode&lt;K,V&gt; hd = null, tl = null;
        do {
            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null);
            if (tl == null)
                hd = p;
            else {
                p.prev = tl;
                tl.next = p;
            }
            tl = p;
        } while ((e = e.next) != null);
        if ((tab[index] = hd) != null)
            hd.treeify(tab);
    }
}
</code></pre>
<hr>
<h3 id="getobject-key">get(Object key)</h3>
<p><em>主要判断依据是key和key的hash</em></p>
<pre><code class="language-java">public V get(Object key) {
    Node&lt;K,V&gt; e;
    return (e = getNode(hash(key), key)) == null ? null : e.value;
}

final Node&lt;K,V&gt; getNode(int hash, Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;
    //1.判断table是否为空;
    //2.若table已初始化判断长度是否大于0;
    //3.根据计算出的下标找tab中对应下标数据判断是否为null并赋值给first
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (first = tab[(n - 1) &amp; hash]) != null) {
        //判断hash和key值是否相同,相同则返回
        if (first.hash == hash &amp;&amp; // always check first node
            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))
            return first;
        //判断first的next节点是否为null
        if ((e = first.next) != null) {
            //判断first节点是否为treeNode,是则以获取树节点方式获取
            if (first instanceof TreeNode)
                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            //不是树节点则存储结构为链表结构,遍历链表直到找到值.
            do {
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}
</code></pre>
<h4 id="gettreenodeint-h-object-k"><em>getTreeNode(int h, Object k)</em></h4>
<p><em>注: 从root节点开始查找</em></p>
<pre><code>/**
 * Calls find for root node.
 */
final TreeNode&lt;K,V&gt; getTreeNode(int h, Object k) {
    return ((parent != null) ? root() : this).find(h, k, null);
}
</code></pre>
<h4 id="findint-h-object-k-class-kc"><em>find(int h, Object k, Class&lt;?&gt; kc)</em></h4>
<p><em>主要依据: 判断hash,小往左找,大往右找</em></p>
<pre><code class="language-java">/**
 * Finds the node starting at root p with the given hash and key.
 * The kc argument caches comparableClassFor(key) upon first use
 * comparing keys.
 */
final TreeNode&lt;K,V&gt; find(int h, Object k, Class&lt;?&gt; kc) {
    TreeNode&lt;K,V&gt; p = this;
    do {
        int ph, dir; K pk;
        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;
        //-- 判断hash 和 当前节点hash, 若 h &lt; ph 走左边
        if ((ph = p.hash) &gt; h)
            p = pl;
        //若 h &gt; ph 走右边
        else if (ph &lt; h)
            p = pr;
        //若相等,判断key是否相同,是则返回
        else if ((pk = p.key) == k || (k != null &amp;&amp; k.equals(pk)))
            return p;
        //-- 若ph = h 且 key 不相等,且当期节点只有左或只有右节点,则继续向左或向右往下找
        else if (pl == null)
            p = pr;
        else if (pr == null)
            p = pl;
        //-- 若当前节点的左右节点都不为空
        //comparableClassFor()判断key是否实现了comparable接口,如果有则通过compareComparables()判断两者大小 小则走左
        else if ((kc != null || (kc = comparableClassFor(k)) != null) &amp;&amp; (dir = compareComparables(kc, k, pk)) != 0)
            p = (dir &lt; 0) ? pl : pr;
        //从右节点若能找到则返回找到的值 
        else if ((q = pr.find(h, k, kc)) != null)
            return q;
        //找不到则从左边找
        else
            p = pl;
    } while (p != null);
    return null;
}
</code></pre>
<h4 id="comparableclassforobject-x"><em>comparableClassFor(Object x)</em></h4>
<pre><code class="language-java"> /**
 * Returns x's Class if it is of the form &quot;class C implements
 * Comparable&lt;C&gt;&quot;, else null.
 */
static Class&lt;?&gt; comparableClassFor(Object x) {
    //判断key是否实现了Comparable接口
    if (x instanceof Comparable) {
        Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;
        //若为String类型,则直接返回
        if ((c = x.getClass()) == String.class) // bypass checks
            return c;
        //注:getGenericInterfaces()方法返回对象实现的所有接口数组
        if ((ts = c.getGenericInterfaces()) != null) {
            for (int i = 0; i &lt; ts.length; ++i) {
                //注  1.ParameterizedType为参数化类型,List&lt;obj&gt;,Map&lt;String,Long&gt;这种带&quot;&lt;&gt;&quot;的,像String 就不是参数化类型
                //    2.getActualTypeArguments()方法可返回参数化类型&quot;&lt;&gt;&quot;中的类型数组,如Map&lt;String,Object&gt;可获得[String,Object]
                //
                if (((t = ts[i]) instanceof ParameterizedType) &amp;&amp;
                    ((p = (ParameterizedType)t).getRawType() ==
                     Comparable.class) &amp;&amp;
                    (as = p.getActualTypeArguments()) != null &amp;&amp;
                    as.length == 1 &amp;&amp; as[0] == c) // type arg is c
                    return c;
            }
        }
    }
    return null;
}
</code></pre>
<h4 id="comparecomparablesclass-kc-object-k-object-x"><em>compareComparables(Class&lt;?&gt; kc, Object k, Object x)</em></h4>
<pre><code>static int compareComparables(Class&lt;?&gt; kc, Object k, Object x) {
    return (x == null || x.getClass() != kc ? 0 :
            ((Comparable)k).compareTo(x));
}
</code></pre>
<hr>
<h3 id="removekey">remove(key)</h3>
<pre><code class="language-java">@Override
public V remove(Object key) {
        Node&lt;K,V&gt; e;
        return (e = removeNode(hash(key), key, null, false, true)) == null ?
            null : e.value;
    }
</code></pre>
<h4 id="removenodehash-key-value-matchvalue-movable">removeNode(++hash++, ++key++, value, matchValue, movable)</h4>
<pre><code class="language-java">/**
 * Implements Map.remove and related methods
 *
 * @param hash hash for key
 * @param key the key
 * @param value the value to match if matchValue, else ignored
 * @param matchValue if true only remove if value is equal
 * @param movable if false do not move other nodes while removing
 * @return the node, or null if none
 */
final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,
                           boolean matchValue, boolean movable) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;
    //map长度大于0且根据key可以找到节点
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (p = tab[index = (n - 1) &amp; hash]) != null) {
        Node&lt;K,V&gt; node = null, e; K k; V v;
        //若满足相同条件 hash,key都相同 将值赋给node
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
            node = p;
        //p.next有值,找到值并赋给node
        else if ((e = p.next) != null) {
            //树结构
            if (p instanceof TreeNode)
                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);
            //链表结构
            else {
                do {
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key ||
                         (key != null &amp;&amp; key.equals(k)))) {
                        node = e;
                        break;
                    }
                    p = e;
                } while ((e = e.next) != null);
            }
        }
        
        //node不为空
        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||
                             (value != null &amp;&amp; value.equals(v)))) {
            //树结构:根据树结构执行removeTreeNode()
            if (node instanceof TreeNode)
                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);
            //
            else if (node == p)
                tab[index] = node.next;
            else
                p.next = node.next;
            ++modCount;
            --size;
            afterNodeRemoval(node);
            return node;
        }
    }
    return null;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式 - 装饰者模式]]></title>
        <id>https://dabshi.github.io/post/decorator</id>
        <link href="https://dabshi.github.io/post/decorator">
        </link>
        <updated>2020-02-16T08:53:02.000Z</updated>
        <content type="html"><![CDATA[<h4 id="装饰者模式">装饰者模式：</h4>
<ul>
<li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li>
<li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。  当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</li>
</ul>
<hr>
<pre><code class="language-java">package decorator;

/**
 * 饮料基类
 */
public abstract class Beverage {

    String description = &quot;Unknown Beverage&quot;;

    public String getDescription(){
        return description;
    }

    public abstract double cost();
}

</code></pre>
<hr>
<pre><code class="language-java">package decorator;

/**
 * 调料类
 */
public abstract class CondimentDecorator extends Beverage {
    public abstract String getDescription();
}

</code></pre>
<pre><code class="language-java">package decorator;

public class Mocha extends CondimentDecorator {

    Beverage beverage;

    public Mocha(Beverage beverage) {
        this.beverage = beverage;
    }

    @Override
    public String getDescription() {
        return beverage.getDescription() + &quot;, Mocha&quot;;
    }

    @Override
    public double cost() {
        return 0.2 + beverage.cost();
    }
}

</code></pre>
<pre><code class="language-java">package decorator;

public class Soy extends CondimentDecorator {

    Beverage beverage;

    public Soy(Beverage beverage) {
        this.beverage = beverage;
    }

    @Override
    public String getDescription() {
        return beverage.getDescription() + &quot;, Soy&quot;;
    }

    @Override
    public double cost() {
        return 0.3 + beverage.cost();
    }
}

</code></pre>
<pre><code class="language-java">package decorator;

public class Whip extends CondimentDecorator {

    Beverage beverage;

    public Whip(Beverage beverage) {
        this.beverage = beverage;
    }

    @Override
    public String getDescription() {
        return beverage.getDescription() + &quot;, Whip&quot;;
    }

    @Override
    public double cost() {
        return 0.4 + beverage.cost();
    }
}

</code></pre>
<hr>
<pre><code class="language-java">package decorator;

public class Espresso extends Beverage {

    public Espresso() {
        description = &quot;Espresso&quot;;
    }

    @Override
    public double cost() {
        return 1.99;
    }
}

</code></pre>
<pre><code class="language-java">package decorator;

public class HouseBlend extends Beverage {

    public HouseBlend() {
        description = &quot;House Blend Coffee&quot;;
    }

    @Override
    public double cost() {
        return 0.89;
    }
}

</code></pre>
<hr>
<pre><code class="language-java">package decorator;

public class Test {
    public static void main(String[] args) {
        Beverage espresso = new Espresso();
        System.out.println(espresso.getDescription() + &quot; $&quot; + espresso.cost());

        Beverage houseBlend = new HouseBlend();
        houseBlend = new Mocha(houseBlend);
        houseBlend = new Mocha(houseBlend);
        houseBlend = new Whip(houseBlend);
        System.out.println(houseBlend.getDescription() + &quot; $&quot; + houseBlend.cost());
    }
}

</code></pre>
<hr>
<h4 id="注意点">注意点：</h4>
<ol>
<li>使用装饰者模式会加入大量的小类，让代码不容易被了解，如java io</li>
<li>需要注意类型，使用装饰者时需注意要使用基类类型，而不能使用具体的组件类型。例如：Test类中使用Beverage接收 HouseBlend 而不是 用具体类型。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式 - 单例模式]]></title>
        <id>https://dabshi.github.io/post/single</id>
        <link href="https://dabshi.github.io/post/single">
        </link>
        <updated>2020-02-16T08:51:41.000Z</updated>
        <content type="html"><![CDATA[<h4 id="单例模式">单例模式：</h4>
<ul>
<li>资源共享的情况下，避免由于资源操作时导致的性能或损耗等。如上述中的日志文件，应用配置。</li>
<li>控制资源的情况下，方便资源之间的互相通信。如线程池等。</li>
</ul>
<pre><code class="language-java">//饿汉
package single;

public class HungrySingle {

    private static HungrySingle hungrySingle = new HungrySingle();

    private HungrySingle(){

    }

    public static HungrySingle getInstance(){
        return hungrySingle;
    }
}

</code></pre>
<hr>
<pre><code class="language-java">package single;

public class LazySingle {

    private static LazySingle lazySingle;

    private LazySingle(){

    }

    /**
     * 最简单的方式
     * 优点：节约资源
     * 缺点：线程不安全
     * @return
     */
    public static LazySingle getInstance(){
        if (null == lazySingle){
            lazySingle = new LazySingle();
        }
        return lazySingle;
    }

    /**
     * 加 synchronized 关键字 - 方法
     * 缺点：性能低
     * @return
     */
//    public static synchronized LazySingle getInstance(){
//        if (null == lazySingle){
//            lazySingle = new LazySingle();
//        }
//        return lazySingle;
//    }

    /**
     * 加 synchronized 关键字 - 代码块
     * 确定：性能较低
     * @return
     */
//    public static LazySingle getInstance(){
//
//        synchronized(LazySingle.class){
//            if (null == lazySingle){
//                lazySingle = new LazySingle();
//            }
//        }
//        return lazySingle;
//    }

    /**
     * 加 synchronized 关键字 - 双重锁
     * 优点：性能提高
     * @return
     */
//    public static LazySingle getInstance(){
//
//        if (lazySingle == null){
//            synchronized(LazySingle.class){
//                if (null == lazySingle){
//                    lazySingle = new LazySingle();
//                }
//            }
//        }
//
//        return lazySingle;
//    }

}

</code></pre>
<hr>
<pre><code class="language-java">package single;

/**
 * 内部类实现单例
 * 优点：代码优雅，线程安全，节约资源
 * 缺点：包括懒汉饿汉都存在的 可通过反射强制执行构造方法，解决方法在构造方法加非null判断，不为空则抛出异常（不够优雅）。
 */
public class InnerClassSingle {

    private InnerClassSingle(){

    }

    static class Instance{
        private static InnerClassSingle INSTANCE = new InnerClassSingle();
    }

    public static InnerClassSingle getInstance(){
        return Instance.INSTANCE;
    }
}

</code></pre>
<hr>
<pre><code class="language-java">package single;
//枚举
public enum  EnumSingle {

    INSTANCE;

    public void data(String name, int age){
        this.age = age;
        this.name = name;
    }

    private String name;

    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式 - 策略模式]]></title>
        <id>https://dabshi.github.io/post/strategy</id>
        <link href="https://dabshi.github.io/post/strategy">
        </link>
        <updated>2020-02-16T04:28:40.000Z</updated>
        <content type="html"><![CDATA[<h4 id="策略模式">策略模式：</h4>
<ul>
<li>多个类只区别在表现行为不同,可以使用Strategy模式,在运行时动态选择具体要执行的行为。</li>
<li>需要在不同情况下使用不同的策略(算法),或者策略还可能在未来用其它方式来实现。</li>
<li>对客户隐藏具体策略(算法)的实现细节,彼此完全独立。</li>
</ul>
<pre><code class="language-java">public interface Cash {
    double result(double money);
}

</code></pre>
<pre><code class="language-java">/**
 * 绿头鸭
 */
public class MallardDuck extends Duck {

    public MallardDuck() {
        this.setFlyBehavior(new FlyByWings());
        this.setQuackBehavior(new QuackG());
    }

    public void display(){
        System.out.println(&quot;I'm mallardDuck;&quot;);
    }
}
</code></pre>
<pre><code class="language-java">/**
 * 橡皮鸭
 */
public class RubberDuck extends Duck {

    public RubberDuck() {
        this.setFlyBehavior(new FlyNoway());
        this.setQuackBehavior(new QuackW());
    }

    public void display(){
        System.out.println(&quot;I'm rubberDuck&quot;);
    }
}
</code></pre>
<hr>
<pre><code class="language-java">public interface FlyBehavior {

    void fly();
}

</code></pre>
<pre><code class="language-java">public class FlyByWings implements FlyBehavior {
    @Override
    public void fly() {
        System.out.println(&quot;用翅膀飞&quot;);
    }
}
</code></pre>
<pre><code class="language-java">public class FlyNoway implements FlyBehavior {
    @Override
    public void fly() {
        System.out.println(&quot;不能飞&quot;);
    }
}
</code></pre>
<hr>
<pre><code class="language-java">public interface QuackBehavior {
    void quack();
}
</code></pre>
<pre><code class="language-java">public class QuackG implements QuackBehavior {
    @Override
    public void quack() {
        System.out.println(&quot;嘎嘎嘎&quot;);
    }
}
</code></pre>
<pre><code class="language-java">public class QuackW implements QuackBehavior {
    @Override
    public void quack() {
        System.out.println(&quot;哇哇哇&quot;);
    }
}
</code></pre>
<hr>
<pre><code class="language-java">public class Test {
    public static void main(String[] args) {
        MallardDuck mallardDuck = new MallardDuck();
        mallardDuck.display();
        mallardDuck.performQuack();
        mallardDuck.performFly();

        RubberDuck rubberDuck = new RubberDuck();
        rubberDuck.display();
        rubberDuck.performQuack();
        rubberDuck.setFlyBehavior(new FlyNoway());
        rubberDuck.performFly();
    }
}

/*
I'm mallardDuck;
嘎嘎嘎
用翅膀飞
I'm rubberDuck
哇哇哇
不能飞
*/
</code></pre>
]]></content>
    </entry>
</feed>